package com.mt.agent.constant;

public interface Prompt {

    //大模型推理任务
    String MODEL_INFERENCE_TASK = """
            你是一个擅长小巨人企业数据分析的业务助理，你能通过用户所说的话来设定任务并且给出任务规划。
            
            已知对话历史为
            ```
            ${diag_history}
            ```
            
            已知【上一次的规划内容】为
            ```
            ${plan_history}
            ```
            
            已知【基础功能】是
            ```
            ${sys_fun}
            ```
            
            系统可用的数据包括
            ```
            ${data_source_list}
            ```
            
            此时此刻，用户说的话是
            ```
            ${user_input}
            ```
            
            如果用户的需求不需要操作【系统基础功能】也能回答，请直接给出以“【”和“】”包裹的答案
            
            如果用户的需求要通过操作【系统基础功能】才能回答，那么请并回答以下问题
            1 【任务目标】用一句简短的话总结用户想要完成什么样的任务
            2 【任务步骤】上述任务可以通过什么样的步骤来实现，请用有序列表来回答，其中，
            - 【任务步骤】要说明用了什么功能，并说明当前步骤的输出是什么
            - 制定步骤时要尽量保留【上一次的规划内容】中已经确认的部分
            - 规划步骤要尽量详细
            - 数据查询步骤要说明清楚查询什么数据，如果有后续步骤需要用到的数据，将所有要用到的数据字段一一列出来
            - 少做总结、结论、说明，不要伪造信息
            - SQL生成不要做求和、求平均数等运算，通过后续步骤进行数据运算
            3 【任务输出】对于上述任务执行结果，用户想要什么样的呈现方式，要求以逗号分隔的表格为格式呈现
            你的答案只需要包含【任务目标】、【任务输出】、【任务步骤】2个内容，不需要其他额外的信息。答案样例如下
            ```
            【任务目标】…
            【任务输出】
            内容标题, 输出样式
            标题1, 控件名称1
            …
            【任务步骤】
            第一步：…；输出 …；
            第二步：…；输出 …；
            ```
            """;

    //提取任务共识
    String GET_TASK_CONSENSUS = """
            已知系统【基本功能】为 ${sys_fun}，当前任务规划器给出的答案为
            ```${ds_answer}```
            请从上述文本中提【${var_name}】这一内容，该内容的要求为【${var_desc}】
            """;

    //获取任务名
    String GET_TASK_NAME = """
            已知当前系统支持以下功能
            ```
            ${systemFunctions}
            ```
            
            并且已知一段包含用户想要完成的任务和该任务执行步骤的文本如下
            ```
            ${ds_answer}
            ```
            
            请用一句话总结用户想要完成的【任务】是什么
            """;

    //获取任务输出
    String GET_TASK_OUTPUT = """
            已知当前系统支持的【输出样式】包括
            ```
            ${sys_visual_style}
            ```
            
            并且已知一段包含【任务描述】、【任务输出】及【任务步骤】的文本如下
            ```
            ${ds_answer}
            ```
            
            为了更好地呈现该任务的处理结果，请基于已知信息分析用户想要得到的最终输出是什么，用逗号分隔的方式列出一个表格，表格内容的要求如下
            - 表头包括“编号, 内容标题, 输出样式”
            - 每一行对应一个需要向用户展示的结果
            - 避免重复的数据呈现
            - 表格中的【输出样式】只能从系统支持的【输出样式】中选取
            - 表格样例如下
            ```
            编号, 内容标题, 输出样式
            1, 广州市黄埔区通用设备制造业2022年的营收情况, 文本框
            2, 广州市天河区通用设备制造业2022年的营收情况, 文本框
            3, 广州市通用设备制造业2022年营收情况, 饼图
            ...
            ```
            - 只需要返回表格，不需要返回其他文本
            """;

    //获取任务步骤
    String GET_TASK_STEP = """
            已知系统【基本功能】为
            ```
            ${sys_funs}
            ```
            
            当前任务规划器给出的答案为
            ```
            ${ds_answer}
            ```
            
            请基于【任务步骤】，分析应该按照什么样的顺序调用当前系统支持的【基本功能】，最终梳理出一份系统【基本功能】的执行计划，要求
            1) 每一个步骤对应1个【基本功能】
            2) 执行计划中的每1个步骤都应该明确工具调度【所需入参】、【输出结果】
            3) 输入参数如果来源于前置的输出结果，输入变量的格式为"执行步骤.输出结果"
            4) 步骤包含需要的数据来源的步骤和数据，讲清楚要查询、处理的数据和来源
            5) 为了SQL查询取值方便，涉及SQL查询的尽量分成多个简单查询
            6) 只需要返回执行计划列表，不需要返回其他文本
            """;

    //指令化步骤
    String GET_FUNC_STEP = """
            已知数据源信息如下：
            ```
            ${datasource_info}
            ```
            
            已知系统的【基础功能】对应的Python函数定义如下：
            ```
            ${sys_fun}
            ```
            
            当前【任务名称】为：
            ```
            ${task_name}
            ```
            
            已知【任务输出】如下：
            ```
            ${task_vis_output}
            ```
            
            任务通过调用当前系统支持的【基础功能】来实现，如下【任务步骤列表】所示
            ```
            ${task_steps}
            ```
            
            请基于上述信息，生成可以完整完成任务的python代码，要求
            1、确保代码语法正确，可以用于main.py，生成的代码里面不要包含上面的函数定义
            2、不需要考虑函数的具体实现，只需要保证调用逻辑正确
            3、只能使用【基础功能】对应的函数声明定义的功能
            4、生成的代码不应该包含假设的数据或示例的数据
            5、所有传入参数，要么来自于已提供的信息，要么来自于前面代码的执行结果
            6、方法执行有返回结果的请使用英文变量接收
            7、注释使用中文
            """;

    //注释翻译
    String COMMENT_TRANSLATION = """
            已知可执行的main.py的内容如下
            ```
            ${py_orders}
            ```
            
            你是一名python专家，请基于上述信息，生成一个非技术人员可阅读的执行说明列表，要求
            - 根据代码注释生成步骤说明
            - 每一行对应一个步骤
            - 尽可能多的保留输入输出的参数细节
            - 只输出执行说明列表，不要有额外内容
            """;

    //生成工作计划解释
    String WORKFLOW_PLANNING = """
            已知可执行的main.py的内容如下
            ```
            {$py_orders}
            ```
            
            请基于上述信息，生成一个可阅读的执行说明列表，要求
            - 根据代码注释生成步骤说明
            - 每一行对应一个步骤
            - 尽可能多的保留输入输出的参数细节
            - 只输出执行说明列表，不要有额外内容
            """;

    //进行追问的提示词
    String QUESTION_ASK = """
            已知用户想做的【任务名称】：
            ```
            ${task_name}
            ```
            
            为了完成上述任务，规划出来的【任务步骤】如下：
            ```
            ${plan_explain}
            ```
            
            用户期望的【任务输出】形式如下：
            ```
            ${task_vis_output}
            ```
            
            为了执行该任务，系统可提供的【任务输入】如下：
            ```
            ${input_params}
            ```
            
            系统因为以下【原因】要与用户沟通:
            ```
            ${reason}
            ```
            
            你是一位专业的客服，负责汇报执行计划，并引导用户决策。你需要满足以下沟通要求：
            1.请用户确认【任务步骤】、【任务输出】、【任务输入】是否需要调整；
            2.若因为某些【原因】进行了相应调整需要进行相应说明
            3.以连贯友好的语言向客户沟通
            """;

}
