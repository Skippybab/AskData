package com.mt.agent.customtask.constant;

public interface Prompt {


    // 将系统生成的数据用自然语言回复
    String TRUE_REPLY = """
            用户问题：
            ```
            ${question}
            ```
            
            用户意图：
            ```
            ${intent}
            ```
            
            查询出来的信息：
            ```
            ${reply}
            ```
            
            请根据查询出来的信息，简要地回复用户的问题
            """;

    String SQL_GEN_QUERY_DATA = """
            已知【本业务系统】支持用户通过文本对话的方式对数据进行分析，并将分析结果进行可视化。
            【本业务系统】以Python代码的方式制定了以下【行动计划】
            ```python
            {{py_codes}}
            ```
            
            已知gen_sql是通过调用LLM实现的，并且SQL数据库的字段设计如下：
            ```
            {{tableSchema}}
            ```
            当前，gen_sql的输入文本是```{{query_text}}```，指定的数据表名是```{{table_name}}```。请帮我生成一个SQL查询语句，使得gen_sql执行之后，【行动计划】的Python代码可以正确响应用户请求。
            具体要求如下：
            - 只生成SELECT语句，绝不包含任何数据修改操作（INSERT、UPDATE、DELETE）
            - 生成的SQL代码语法正确，关键词之间要有空格隔开
            - 不做单位转换处理，不要做任何假设
            - 字符串匹配的时候要允许模糊查询，并考虑语义相似性
            - SQL生成的“别名”要跟Python代码中使用的“别名”保持一致,别名用英文单引号包起来
            - 请直接返回由“```SQL”和“```”包裹的SQL代码，不要返回任何解释文本
            """;

    String SQL_GEN_CASE_ONE = """
            已知【本业务系统】支持用户通过文本对话的方式对数据进行分析，并将分析结果进行可视化。
            用户的【历史请求】包括
            ```
            {{diag_history}}
            {{question}}
            ```
            其中，当前【用户的请求】是最后一句
            
            根据当前【用户的请求】，【本业务系统】以Python代码的方式制定了以下【行动计划】
            {{py_codes}}
            
            已知gen_sql是通过调用LLM实现的，并且SQL数据库的字段设计如下：
            ```
            {{tableSchema}}
            ```
            当前，gen_sql的输入文本是```{{query_text}}```，指定的数据表名是```{{table_name}}```。请帮我生成一个可以直接执行的SQL代码，使得gen_sql执行之后，【行动计划】的Python代码可以正确响应用户请求。
            具体要求如下：
            - 只生成SELECT语句，绝不包含任何数据修改操作（INSERT、UPDATE、DELETE）
            - 生成的SQL代码语法正确，关键词之间要有空格隔开
            - 不做单位转换处理，不要做任何假设
            - 字符串匹配的时候要允许模糊查询，并考虑语义相似性
            - SQL生成的“别名”要跟Python代码中使用的“别名”保持一致
            - 请直接返回由“```SQL”和“```”包裹的SQL代码，不要返回任何解释文本
            """;
    String SQL_GEN_CASE_TWO = """
            已知【本业务系统】支持用户通过文本对话的方式对数据进行分析，并将分析结果进行可视化。
            用户的【历史请求】包括
            ```
            {{diag_history}}
            {{question}}
            ```
            其中，当前【用户的请求】是最后一句

            根据当前【用户的请求】，【本业务系统】以Python代码的方式制定了以下【行动计划】
            {{py_codes}}

            已知gen_sql是通过调用LLM实现的，并且SQL数据库的表名是data_little_giant_business_info
            ```
            {{tableSchema}}
            ```
            当前，gen_sql的输入文本是```{{query_text}}```，指定的数据表名是```{{table_name}}```。请帮我生成一个可以直接执行的SQL代码，使得gen_sql执行之后，【行动计划】的Python代码可以正确响应用户请求。
            具体要求如下：
            - 只生成SELECT语句，绝不包含任何数据修改操作（INSERT、UPDATE、DELETE）
            - 生成的SQL代码符合Mysql语法，关键词之间要有空格隔开
            - 禁止生成嵌套select
            - 不做单位转换处理，不要做任何假设
            - 字符串匹配的时候要允许模糊查询，并考虑语义相似性
            - SQL生成的“别名”要跟Python代码中使用的“别名”保持一致
            - 请直接返回由“```SQL”和“```”包裹的SQL代码，不要返回任何解释文本
            """;
    String SQL_GEN_CASE_THREE = """
            已知【本业务系统】支持用户通过文本对话的方式对数据进行分析，并将分析结果进行可视化。
            用户的【历史请求】包括
            ```
            {{diag_history}}
            {{question}}
            ```
            其中，当前【用户的请求】是最后一句
    
            根据当前【用户的请求】，【本业务系统】以Python代码的方式制定了以下【行动计划】
            {{py_codes}}
    
            已知gen_sql是通过调用LLM实现的，并且SQL数据库的英文表名是```data_little_giant_business_info```，表描述为```广州2021年到2023年小巨人企业年度经营数据```
            ```
            {{tableSchema}}
            ```
            当前，gen_sql的输入文本是```{{query_text}}```，指定的数据表的描述是```{{table_name}}```。请帮我生成一个可以直接执行的SQL代码，使得gen_sql执行之后，【行动计划】的Python代码可以正确响应用户请求。
            具体要求如下：
            - 只生成SELECT语句，绝不包含任何数据修改操作（INSERT、UPDATE、DELETE）
            - 生成的SQL代码符合Mysql语法，关键词之间要有空格隔开
            - 所有SQL中涉及的**表名、字段名必须使用英文**（与上方提供的表结构完全一致），不允许出现任何中文字段名或表名
            - 若需使用别名（AS后的名称），可以用中文（例如：SELECT total_revenue AS `营业收入_元` FROM data_little_giant_business_info 是允许的，但 SELECT 总收入 FROM 小巨人企业表 是禁止的）
            - 禁止生成嵌套select
            - 不做单位转换处理，不要做任何假设
            - 字符串匹配的时候要允许模糊查询，并考虑语义相似性
            - SQL生成的“别名”要跟Python代码中使用的“别名”保持一致
            - 请直接返回由“```SQL”和“```”包裹的SQL代码，不要返回任何解释文本
            """;
    String SQL_GEN_CASE_FOUR = """
            已知【本业务系统】支持用户通过文本对话的方式对数据进行分析。
            用户的【历史请求】包括
            ```
            {{diag_history}}
            {{question}}
            ```
            其中，当前【用户的请求】是最后一句
    
            根据当前【用户的请求】，【本业务系统】以Python代码的方式制定了以下【行动计划】
            {{py_codes}}
    
            已知gen_sql是通过调用LLM实现的，并且SQL数据库的表及字段设计如下(含表说明与字段属性)：
            ```
            {{tableSchema}}
            ```
            当前，gen_sql的输入文本是```{{query_text}}```，指定的数据表的描述是```{{table_name}}```，Python代码中读取该字段时使用的【key值】是```{{企业代号,营业收入_元}}```。请帮我生成一个可以直接执行的SQL代码，使得gen_sql执行之后，【行动计划】的Python代码可以正确响应用户请求。
            具体要求如下：
            - 只生成SELECT语句，绝不包含任何数据修改操作（INSERT、UPDATE、DELETE）
            - 生成的SQL代码符合Mysql语法，关键词之间要有空格隔开
            - 所有SQL中涉及的**表名、字段名必须使用英文**（与上方提供的表结构完全一致），不允许出现任何中文字段名或表名
            - 若需使用别名（AS后的名称），可以用中文（例如：SELECT total_revenue AS `营业收入_元` FROM data_little_giant_business_info 是允许的，但 SELECT 总收入 FROM 小巨人企业表 是禁止的）
            - 禁止生成嵌套select
            - 不做单位转换处理，不要做任何假设
            - 字符串匹配的时候要允许模糊查询，并考虑语义相似性
            - SQL生成的“别名”要跟Python代码中读取该字段时使用的【key值】的保持一致
            - 请直接返回由“```SQL”和“```”包裹的SQL代码，不要返回任何解释文本
            """;
//    String SQL_GEN_CASE_FOUR = """
//            已知【本业务系统】支持用户通过文本对话的方式对数据进行分析，并将分析结果进行可视化。
//            用户的【历史请求】包括
//            ```
//            {{diag_history}}
//            {{question}}
//            ```
//            其中，当前【用户的请求】是最后一句
//
//            根据当前【用户的请求】，【本业务系统】以Python代码的方式制定了以下【行动计划】
//            {{py_codes}}
//
//            已知gen_sql是通过调用LLM实现的，并且SQL数据库的英文表名是```data_little_giant_business_info```，表描述为```广州2021年到2023年小巨人企业年度经营数据```
//            ```
//            {{tableSchema}}
//            ```
//            当前，gen_sql的输入文本是```{{query_text}}```，指定的数据表的描述是```{{table_name}}```，Python代码中读取该字段时使用的【key值】是```{{企业代号,营业收入_元}}```。请帮我生成一个可以直接执行的SQL代码，使得gen_sql执行之后，【行动计划】的Python代码可以正确响应用户请求。
//            具体要求如下：
//            - 只生成SELECT语句，绝不包含任何数据修改操作（INSERT、UPDATE、DELETE）
//            - 生成的SQL代码符合Mysql语法，关键词之间要有空格隔开
//            - 所有SQL中涉及的**表名、字段名必须使用英文**（与上方提供的表结构完全一致），不允许出现任何中文字段名或表名
//            - 若需使用别名（AS后的名称），可以用中文（例如：SELECT total_revenue AS `营业收入_元` FROM data_little_giant_business_info 是允许的，但 SELECT 总收入 FROM 小巨人企业表 是禁止的）
//            - 禁止生成嵌套select
//            - 不做单位转换处理，不要做任何假设
//            - 字符串匹配的时候要允许模糊查询，并考虑语义相似性
//            - SQL生成的“别名”要跟Python代码中读取该字段时使用的【key值】的保持一致
//            - 请直接返回由“```SQL”和“```”包裹的SQL代码，不要返回任何解释文本
//            """;
    String SQL_GEN_SINGLE_IND = """
            已知想要查询的某个行业数据【描述性文本】如下：
            ```
            ${query_text}
            ```
            
            以下是数据源的说明：
            ```
            ${tableSchema}
            ```
            
            请对【描述性文本】进行理解，并转换为精确的MySQL查询语句，生成标准如下：
            1. 只生成SELECT语句，绝不包含任何数据修改操作（INSERT、UPDATE、DELETE）
            2. 对字符串类型（如行业、城市、区县）使用LIKE进行模糊匹配,相关字段使用%%包起来
            3. 涉及到行业指标查询，通过统计企业指标的总值来计算
            4. 必须输出纯SQL语句，不包含任何解释性、注释性或者SQL代码块标记等内容
            5. 查询字段的别名要与【描述性文本】要求中明确的包含字段一致
            6. sql中as后面的别名都采用自然语言中文别名，别名用英文单引号包起来
            7. 指标数值不做单位转换处理
            8.涉及多年份查询要注意使用group by分组，并根据时间先后排序
            """;

    String SQL_GEN_SINGLE_ENT = """
            已知想要查询的某个企业数据【描述性文本】如下：
            ```
            ${query_text}
            ```
            
            以下是数据源的说明：
            ```
            ${tableSchema}
            ```
            
            请对【描述性文本】进行理解，并转换为精确的MySQL查询语句，生成标准如下：
            1. 只生成SELECT语句，绝不包含任何数据修改操作（INSERT、UPDATE、DELETE）
            2. 对字符串类型（如企业、城市、区县）使用LIKE进行模糊匹配,相关字段使用%%包起来
            4. 必须输出纯SQL语句，不包含任何解释性、注释性或者SQL代码块标记等内容
            5. 查询字段的别名要与【描述性文本】中明确要求的查询字段一致
            6. sql中as后面的别名都采用自然语言中文别名，别名用英文单引号包起来
            7. 指标数值不做单位转换处理
            """;

    String SQL_GEN_FIELD_RANGE = """
            已知想要查询指定【字段名称】如下：
            ```
            ${field_name}
            ```
            
            以下是数据源的说明：
            ```
            ${tableSchema}
            ```
            
            请对【字段名称】进行理解，并转换为精确的MySQL查询语句，生成标准如下：
            1. 只生成SELECT语句，绝不包含任何数据修改操作（INSERT、UPDATE、DELETE）
            2. 对字符串类型（如城市、企业、城市、区县）使用LIKE进行模糊匹配,相关字段使用%%包起来
            5. 查询【字段名称】对应的某个字段的所有数据，并使用distinct关键字进行去重
            6. sql中as后面的别名使用【字段名称】，别名用英文单引号包起来
            4. 必须输出纯SQL语句，不包含任何解释性、注释性或者SQL代码块标记等内容
            8. 指标数值不做单位转换处理
            """;

    String LIST_DATASOURCE = """
            已知想要查询内容的【描述性文本】如下：
            ```
            ${sqlQueryText}
            ```
            
            已知系统支持的【数据源信息】如下：
            ```
            ${dataInfos}
            ```
            
            请根据已有【数据源信息】回复【描述性文本】中的查询需求，要求：
            1.简洁回复有关数据源名称、数据源描述、数据量、数据范围、主要字段信息的提问
            2.只针对被提及的数据源进行回复，没有被提及的数据表不要出现在回复中
            3.严格根据数据源信息进行回复，不要编造事实
            """;

    String LIST_DATASOURCE_FIELD = """
            已知想要查询内容的【描述性文本】如下：
            ```
            ${sqlQueryText}
            ```
            
            已知系统支持的【数据源信息】如下：
            ```
            ${dataInfos}
            ```
            
            请根据已有【数据源信息】回复【描述性文本】中的查询需求，要求：
            1.简洁回复有关数据源名称、数据源描述、数据量、数据范围、主要字段信息的提问
            2.只针对被提及的数据源进行回复，没有被提及的数据表不要出现在回复
            3.严格根据数据源信息进行回复，不要编造事实
            """;

    String SYS_QUESTION_ANSWER = """
            关于本系统的【查询需求】如下：
            ```
            ${sqlQueryText}
            ```
            
            已知本系统支持自然语言调度的【功能列表】如下：
            ```
            ${chatFun}
            ```
            
            已知本系统支持的【键盘鼠标操作功能列表】如下：
            ```
            ${operateFun}
            ```
            
            已知本系统支持的【可视化功能列表】如下：
            ```
            ${visualizations}
            ```
            
            已知系统涵盖的【数据表信息】如下：
            ```
            1张数据表：
            1 广州2021年到2023年小巨人企业年度经营数据
            ```
            
            且【数据表的详细说明】如下：
            ```
            ${tableSchema}
            ```
            
            你是一位专业的客服，请根据上述信息，以简明的语言回复【查询需求】，要求如下：
            1. 严格基于提供的【功能列表】、【键盘鼠标操作功能列表】、【可视化功能列表】、【数据表信息】、【数据表的详细说明】进行回答，不得编造不存在的内容
            2. 直接输出精简易懂的回复文本
            """;


    String MAP_PARAMS = """            
            已知【用于匹配的列表】如下，格式为【步骤标识】.【表头字段】
            ```
            ${sql_result}
            ```
            
            且【待提取的参数列表】如下，格式为【步骤标识】.【待匹配的参数】：
            ```
            ${params}
            ```
            
            请根据【待提取的参数列表】来匹配【用于匹配的列表】，并输出【字段列表】：
            - 通过【步骤标识】后面来匹配后面的【表头字段】和【待匹配的参数】
            - 直接输出【字段列表】，不需要有其他描述
            - 仅当【表头字段】的前缀层级完全等于【待匹配的参数】时，才视为有效匹配。
            ```
            示例：
            步骤2.营收总额 匹配 步骤2.营收总额.营收总额（万元）（前缀一致）
            步骤2.营收总额 不匹配 步骤2.营收总额.平均营收（万元）（后者包含额外子属性）
            ```
            - 【字段列表】的顺序要对应【待提取的参数列表】的顺序，而且个数要相同，且用逗号隔开，样例如下：
            ```
            结果数据标识.字段1, 结果数据标识.字段2, 结果数据标识.字段3, ...
            ```
            """;


    String SUMMARY = """
            已知当前需要进行以下【阶段性总结要求】：
            ```
            ${summaryTarget}
            ```
            
            【总结要点列表】如下：
            ```
            ${executeResult}
            ```
            
            
            要求生成当前任务执行的精简总结，具体规则如下：
            1.尽可能精简
            2.围绕【阶段性总结要求】，用一段话对【总结要点列表】进行总结
            3.不要编造不存在的信息
            """;

//    String GEN_SQL_CAICT_CASE1_NEW = """
//            已知【本业务系统】支持用户通过文本对话的方式对数据进行分析，并将分析结果进行可视化。
//            用户的【历史请求】包括
//            ```
//            {{diag_history}}
//            {{question}}
//            ```
//            其中，当前【用户的请求】是最后一句
//            根据当前【用户的请求】，【本业务系统】以Python代码的方式制定了以下【行动计划】
//            {{py_codes}}
//
//            已知gen_sql是通过调用LLM实现的，
//            ```
//            {{tableSchema}}
//            ```
//            当前，gen_sql的输入文本是```{{query_text}}```，指定的数据表的描述是```{{table_name}}```。请帮我生成一个可以直接执行的SQL代码，使得gen_sql执行之后，【行动计划】的Python代码可以正确响应用户请求。
//            具体要求如下：
//            - 只生成SELECT语句，绝不包含任何数据修改操作（INSERT、UPDATE、DELETE）
//            - 生成的SQL代码符合Mysql语法，关键词之间要有空格隔开
//            - SQL生成的别名必须与Python代码中用于取值的字典键名完全一致
//            - 所有SQL中涉及的**表名、字段名必须使用英文**（与上方提供的表结构完全一致），不允许出现任何中文字段名或表名
//            - 若需使用别名（AS后的名称），可以用中文（例如：SELECT enterprise_name AS `企业名称` FROM enterprise_operation 是允许的，但 SELECT 企业名称 FROM 企业营收数据表 是禁止的）。
//            - 同表多次引用必须用别名区分（例如：t1.enterprise_name = t2.enterprise_name）
//            - SQL必须完全适配Python代码中的统计需求和数据维度，确保Python可直接使用SQL结果
//            - 禁止嵌套子查询
//            - 禁止在WHERE条件中使用LAG窗函数
//            - 不做单位转换处理，不要做任何假设
//            - 字符串匹配的时候要允许模糊查询，并考虑语义相似性
//            - 请直接返回由“```SQL”和“```”包裹的SQL代码，不要返回任何解释文本
//            ```
String GEN_SQL_CAICT_CASE1 = """
            已知【本业务系统】支持用户通过文本对话的方式对数据进行分析，并将分析结果进行可视化。
            用户的【历史请求】包括
            ```
            {{diag_history}}
            {{question}}
            ```
            其中，当前【用户的请求】是最后一句
            根据当前【用户的请求】，【本业务系统】以Python代码的方式制定了以下【行动计划】
            {{py_codes}}
            
            已知gen_sql是通过调用LLM实现的，
            ```
            {{tableSchema}}
            ```
            当前，gen_sql的输入文本是```{{query_text}}```，指定的数据表的描述是```{{table_name}}```。请帮我生成一个可以直接执行的SQL代码，使得gen_sql执行之后，【行动计划】的Python代码可以正确响应用户请求。
            具体要求如下：
            - 只生成SELECT语句，绝不包含任何数据修改操作（INSERT、UPDATE、DELETE）
            - 生成的SQL代码符合Mysql语法，关键词之间要有空格隔开
            - 所有SQL中涉及的**表名、字段名必须使用英文**（与上方提供的表结构完全一致），不允许出现任何中文字段名或表名
            - 若需使用别名（AS后的名称），可以用中文（例如：SELECT enterprise_name AS `企业名称` FROM enterprise_operation 是允许的，但 SELECT 企业名称 FROM 企业营收数据表 是禁止的）
            - 禁止生成嵌套select
            - 禁止在WHERE条件中使用LAG窗函数
            - 不做单位转换处理，不要做任何假设
            - 字符串匹配的时候要允许模糊查询，并考虑语义相似性
            - SQL生成的“别名”要跟Python代码中使用的“别名”保持一致
            - 请直接返回由“```SQL”和“```”包裹的SQL代码，不要返回任何解释文本
            ```
            """;


}
